package com.jwkj.activity;

import java.util.ArrayList;
import java.util.List;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;

import com.jwkj.data.Contact;
import com.jwkj.data.SharedPreferencesManager;
import com.jwkj.global.Constants;
import com.jwkj.utils.T;
import com.jwkj.utils.Utils;
import com.jwkj.widget.NormalDialog;
import com.p2p.core.P2PHandler;
import com.yoosee.R;

public class ModifyBoundEmailActivity extends BaseActivity implements
		OnClickListener {
	Context mContext;
	Contact mContact;
	ImageView mBack;
	Button mSave;
	EditText mEmail, mSend, mPassword;
	NormalDialog dialog;
	Spinner spinner;
	private boolean isRegFilter = false;
	String email;
	String email_name;
	private TextView txSend, txPassword, txSendSelf;
	private CheckBox cbSendSelf;
	List<String> data_list;
	private boolean isSendSelf = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.modify_npc_bound_email);

		mContact = (Contact) getIntent().getSerializableExtra("contact");
		email_name = getIntent().getStringExtra("email");
		mContext = this;
		initCompent();
		initData();
		regFilter();
	}

	public void initCompent() {
		mBack = (ImageView) findViewById(R.id.back_btn);
		mSave = (Button) findViewById(R.id.save);
		mEmail = (EditText) findViewById(R.id.email);
		mSend = (EditText) findViewById(R.id.ed_sendemail);
		mPassword = (EditText) findViewById(R.id.et_password);
		spinner = (Spinner) findViewById(R.id.spinner2);
		txSend = (TextView) findViewById(R.id.tx_send);
		txPassword = (TextView) findViewById(R.id.tx_password);
		txSendSelf = (TextView) findViewById(R.id.tx_sen_self);
		cbSendSelf = (CheckBox) findViewById(R.id.cb_sen_self);
		isSendSelf = SharedPreferencesManager.getInstance()
				.getIsSendemailToSelf(mContext);
		cbSendSelf.setChecked(isSendSelf);
		mBack.setOnClickListener(this);
		mSave.setOnClickListener(this);
		if (!email_name.equals("Unbound") && !email_name.equals("未绑定")
				&& !email_name.equals("未綁定")) {
			mEmail.setText(email_name);
		}
		initSpinner();
	}

	void initSpinner() {
		// 数据
		data_list = new ArrayList<String>();
		data_list.add("@qq.com");
		data_list.add("@163.com");
		data_list.add("@gmail.com");
		data_list.add("@126.com");
		data_list.add("@126.com");
		data_list.add("@126.com");
		data_list.add("@126.com");
		data_list.add("系统默认邮箱");
		// 适配器
		MySpinnerAdapter arr_adapter = new MySpinnerAdapter();
		// ArrayAdapter<String> arr_adapter = new ArrayAdapter<String>(mContext,
		// android.R.layout.simple_list_item_1, data_list);
		// 设置样式
		// arr_adapter.setDropDownViewResource(R.layout.spinner_item);

		// 加载适配器
		spinner.setAdapter(arr_adapter);
	}

	private void initData() {
		cbSendSelf.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(CompoundButton buttonView,
					boolean isChecked) {
				isSendSelf = isChecked;
				// 收件人邮箱要联动且设置为不可编辑
				setReseveEmail();
				mEmail.setEnabled(!isSendSelf);
			}
		});

		mSend.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				setReseveEmail();
			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {

			}

			@Override
			public void afterTextChanged(Editable s) {

			}
		});
		spinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				if (position == data_list.size() - 1) {
					// 是系统邮箱发件人不可编辑，发给自己按钮不可点击，并且在给自己按钮
					isSendSelf = false;
					cbSendSelf.setEnabled(false);
					cbSendSelf.setChecked(false);
					mSend.setText("");
					mSend.setEnabled(false);
					mPassword.setText("");
					mPassword.setEnabled(false);
					TextEnable(true);
				} else {
					// 不是系统邮箱，在发给自己按钮选中时同步更改收件人
					cbSendSelf.setEnabled(true);
					mSend.setEnabled(true);
					mPassword.setEnabled(true);
					TextEnable(false);
				}
				setReseveEmail();

			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
				// TODO Auto-generated method stub

			}
		});

	}

	void TextEnable(boolean isGray) {
		if (isGray) {
			txSend.setTextColor(Utils
					.getColorByResouse(R.color.text_color_gray));
			txPassword.setTextColor(Utils
					.getColorByResouse(R.color.text_color_gray));
			txSendSelf.setTextColor(Utils
					.getColorByResouse(R.color.text_color_gray));
		} else {
			txSend.setTextColor(Utils.getColorByResouse(R.color.black));
			txPassword.setTextColor(Utils.getColorByResouse(R.color.black));
			txSendSelf.setTextColor(Utils.getColorByResouse(R.color.black));
		}

	}

	void setReseveEmail() {
		if (isSendSelf) {
			Log.e("dxsemail",
					"spinner.getSelectedItemPosition()-->"
							+ spinner.getSelectedItemPosition());
			if (spinner.getSelectedItemPosition() == data_list.size() - 1) {
				return;
			}
			String emailRoot = spinner.getSelectedItem().toString();
			Editable senemail = mSend.getText();
			mEmail.setText(senemail);
			mEmail.append(emailRoot);
		} else {
			mEmail.setText(email_name);
			mEmail.setEnabled(true);
		}
	}

	class MySpinnerAdapter extends BaseAdapter {

		@Override
		public View getDropDownView(int position, View convertView,
				ViewGroup parent) {
			final ViewHolder holder;
			if (null == convertView) {
				convertView = LayoutInflater.from(mContext).inflate(
						R.layout.spinner_item, null);
				holder = new ViewHolder();
				holder.txEmail = (TextView) convertView
						.findViewById(R.id.tx_emails);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			holder.txEmail.setText(data_list.get(position));
			holder.txEmail.setPadding(5, 20, 10, 20);
			return convertView;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return data_list.size();
		}

		@Override
		public String getItem(int position) {
			// TODO Auto-generated method stub
			return data_list.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			final ViewHolder holder;
			if (null == convertView) {
				convertView = LayoutInflater.from(mContext).inflate(
						R.layout.spinner_item, null);
				holder = new ViewHolder();
				holder.txEmail = (TextView) convertView
						.findViewById(R.id.tx_emails);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			holder.txEmail.setText(data_list.get(position));
			return convertView;
		}

		class ViewHolder {
			public TextView txEmail;
		}

	}

	public void regFilter() {
		IntentFilter filter = new IntentFilter();
		filter.addAction(Constants.P2P.ACK_RET_SET_ALARM_EMAIL);
		filter.addAction(Constants.P2P.RET_SET_ALARM_EMAIL);
		mContext.registerReceiver(mReceiver, filter);
		isRegFilter = true;
	}

	private BroadcastReceiver mReceiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context arg0, Intent intent) {
			if (intent.getAction().equals(Constants.P2P.RET_SET_ALARM_EMAIL)) {
				int result = intent.getIntExtra("result", -1);
				if (null != dialog && dialog.isShowing()) {
					dialog.dismiss();
					dialog = null;
				}
				if (result == Constants.P2P_SET.ALARM_EMAIL_SET.SETTING_SUCCESS) {
					T.showShort(mContext, R.string.modify_success);
					finish();
				} else if (result == 15) {
					T.showShort(mContext, R.string.email_format_error);
				} else if (result == -1) {
					T.showShort(mContext, R.string.operator_error);
				}
			} else if (intent.getAction().equals(
					Constants.P2P.ACK_RET_SET_ALARM_EMAIL)) {
				int result = intent.getIntExtra("result", -1);
				if (null != dialog && dialog.isShowing()) {
					dialog.dismiss();
					dialog = null;
				}
				if (result == Constants.P2P_SET.ACK_RESULT.ACK_PWD_ERROR) {
					finish();
					Intent i = new Intent();
					i.setAction(Constants.Action.CONTROL_SETTING_PWD_ERROR);
					mContext.sendBroadcast(i);
				} else if (result == Constants.P2P_SET.ACK_RESULT.ACK_NET_ERROR) {
					T.showShort(mContext, R.string.net_error_operator_fault);
				}
			}
		}
	};

	@Override
	public void onClick(View view) {
		// TODO Auto-generated method stub
		switch (view.getId()) {
		case R.id.back_btn:
			finish();
			break;
		case R.id.save:
			email = mEmail.getText().toString();
			if ("".equals(email.trim())) {
				// T.showShort(mContext, R.string.input_email);
				P2PHandler.getInstance().setAlarmEmail(mContact.contactId,
						mContact.contactPassword, "0");
				return;
			}

			if (email.length() > 31 || email.length() < 5) {
				T.showShort(this, R.string.email_too_long);
				return;
			}

			if (null == dialog) {
				dialog = new NormalDialog(this, this.getResources().getString(
						R.string.verification), "", "", "");
				dialog.setStyle(NormalDialog.DIALOG_STYLE_LOADING);
			}
			dialog.showDialog();

			P2PHandler.getInstance().setAlarmEmail(mContact.contactId,
					mContact.contactPassword, email);
			break;
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (isRegFilter) {
			mContext.unregisterReceiver(mReceiver);
			isRegFilter = false;
		}
	}

	@Override
	public int getActivityInfo() {
		// TODO Auto-generated method stub
		return Constants.ActivityInfo.ACTIVITY_MODIFYBOUNDEMAILACTIVITY;
	}

}
